/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.util.*;
import java.time.*;
import java.time.format.*;
import javax.swing.*;
import java.awt.Font;

/**
 *
 * @author 
 */
public class Att extends javax.swing.JFrame {
    private List<String> allNames = Arrays.asList(
        "Jesse",
        "Mira",
        "Liam",
        "Zane",
        "Rina"
    );
    // allNames ‚Äî ito yung list ng allowed o valid na names

    private Set<String> presentList = new HashSet<>();
    // presentList ‚Äî dito ini-store ang mga naka-check in na

    private LocalTime classTime = null;
    // classTime ‚Äî dito malalaman ang oras ng klase (para sa late checker)

    private boolean headerPrinted = false;
    // headerPrinted ‚Äî true kapag na-print na ang petsa sa log (once lang dapat)

    private void handleCheckIn() {
    String inputName = txtName.getText().trim();
    // Kunin ang text sa txtName at tanggalin ang extra spaces.

    if (inputName.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a name.");
        // Ipakita ang message box kung walang laman si inputName.
        return;
        // I-exit ang function kung walang laman si inputName.
    }

    String matchedName = null;
    // Placeholder para sa matched na name sa allNames.

    for (String n : allNames) {
        if (n.equalsIgnoreCase(inputName)) {
            matchedName = n;
            // Kung match si inputName kay n (kahit magkaiba case), iset si matchedName.
            break;
        }
    }

    if (matchedName == null) {
        JOptionPane.showMessageDialog(this, "Name not recognized.");
        // Kung wala talagang match, ipakita na unknown si inputName.
        return;
        // Tigil agad kasi invalid yung name.
    }

    if (!headerPrinted) {
        LocalDate todayDate = LocalDate.now();
        // Kuhanin ang current date gamit si LocalDate.

        String day = todayDate.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
        String month = todayDate.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
        int dayOfMonth = todayDate.getDayOfMonth();
        // I-format ang petsa para ipakita mamaya sa txtLog.

        txtLog.append("üìÖ " + day + " " + month + " " + dayOfMonth + "\n");
        // I-append sa txtLog ang petsa bilang header.
        headerPrinted = true;
        // Iset si headerPrinted bilang true para di na ulitin.
    }

    LocalTime now = LocalTime.now().withNano(0);
    // Kuhanin ang current time at alisin ang nano part para mas malinis.

    String timeStr = now.format(DateTimeFormatter.ofPattern("hh:mm a"));
    // I-format ang now sa 12-hour format na string para sa log.

    String symbol;
    if (!presentList.contains(matchedName)) {
        presentList.add(matchedName);
        // Kung wala pa si matchedName sa presentList, idagdag siya.

        if (classTime != null && now.isAfter(classTime.plusMinutes(5))) {
            symbol = "‚ùó";
            // Kung may classTime at lagpas 5 minutes si now, late na ‚Äî gamitin ang "‚ùó".
        } else {
            symbol = "‚úî";
            // On time pumasok ‚Äî gamitin ang "‚úî".
        }

        txtLog.append(symbol + " " + matchedName + " | " + timeStr + "\n");
        // Ipakita si matchedName, symbol, at oras sa txtLog.
    } else {
        txtLog.append(matchedName + " already checked in.\n");
        // Kung nasa presentList na si matchedName, sabihin na naka-check-in na siya.
    }

    txtName.setText("");
    // I-clear ang laman ng txtName.

    txtName.requestFocusInWindow();
    // Ibalik ang focus sa txtName para ready na ulit.
    
    // Gawing monospaced ang font para mukhang terminal/program log
    txtLog.setFont(new Font("Monospaced", Font.PLAIN, 13));

    // I-off ang word wrap para hindi hati-hati ang lines ‚Äî cleaner log format
    txtLog.setLineWrap(false);

    // Optional: gawin read-only kung hindi naman kailangang i-edit ng user
    txtLog.setEditable(false);
}
    

    /**
     * Creates new form Att
     */
    public Att() {
        initComponents();
        // Tawagin ang initComponents para ma-load ang GUI.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnCheckin = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        txtClassTime = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Name");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        btnCheckin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCheckin.setText("Check In");
        btnCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckinActionPerformed(evt);
            }
        });

        btnClose.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClose.setText("Finalize");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane2.setViewportView(txtLog);

        txtClassTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClassTimeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Class Time");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Attendance Log:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtClassTime, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 159, Short.MAX_VALUE)))
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtClassTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckinActionPerformed
        handleCheckIn();
        // Kapag na-click ang btnCheckin, tawagin si handleCheckIn.
    }//GEN-LAST:event_btnCheckinActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        handleCheckIn();
        // Kapag na-Enter sa txtName, automatic na check-in din.
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        StringBuilder absentees = new StringBuilder("Absent today:\n");
        // Simulan ang string para sa absent list.

        for (String name : allNames) {
            if (!presentList.contains(name)) {
                absentees.append("‚ùå ").append(name).append("\n");
                // Kung wala sa presentList si name, idagdag sa absent list.
            }
        }

        JOptionPane.showMessageDialog(this, absentees.toString());
        // Ipakita ang absent list sa user.
    }//GEN-LAST:event_btnCloseActionPerformed

    private void txtClassTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClassTimeActionPerformed
        String input = txtClassTime.getText().trim().toLowerCase();
        // Kuhanin ang laman ng txtClassTime, tanggalin spaces at gawing lowercase.

        input = input.replaceAll("[\\s\\.]", "");
        // Tanggalin lahat ng spaces, dots, at periods.

        try {
            DateTimeFormatter formatter;

            if (input.matches("\\d{1,2}:\\d{2}(am|pm)")) {
                // Format: 9:00pm
                formatter = DateTimeFormatter.ofPattern("h:mma");
                classTime = LocalTime.parse(input.toUpperCase(), formatter);
                // I-parse ang oras bilang h:mma
            } else if (input.matches("\\d{1,2}(am|pm)")) {
                // Format: 9pm
                formatter = DateTimeFormatter.ofPattern("ha");
                classTime = LocalTime.parse(input.toUpperCase(), formatter);
            } else if (input.matches("\\d{3,4}(am|pm)")) {
                // Format: 930pm or 0730am
                String fixed = input.replaceAll("(\\d{1,2})(\\d{2})(am|pm)", "$1:$2$3");
                formatter = DateTimeFormatter.ofPattern("h:mma");
                classTime = LocalTime.parse(fixed.toUpperCase(), formatter);
            } else if (input.matches("\\d{4}")) {
                // Format: 2100 or 0730 (military time)
                String fixed = input.replaceAll("(\\d{2})(\\d{2})", "$1:$2");
                formatter = DateTimeFormatter.ofPattern("HH:mm");
                classTime = LocalTime.parse(fixed, formatter);
            } else if (input.matches("\\d{1,2}:\\d{2}")) {
                // Format: 21:00
                formatter = DateTimeFormatter.ofPattern("H:mm");
                classTime = LocalTime.parse(input, formatter);
            } else {
                JOptionPane.showMessageDialog(this, "Invalid format. Try 9PM, 21:00, 9:00AM, or 0730.");
                // Hindi valid ang format ‚Äî show warning.
                return;
            }

            txtLog.append("Class time set: " + classTime.format(DateTimeFormatter.ofPattern("hh:mm a")) + "\n");
            // Ipakita sa txtLog ang na-set na classTime.

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Could not understand the time. Try 8am, 0730, 21:00, etc.");
            // Kapag may error sa parsing, show message.
        }

        txtName.requestFocusInWindow();
        // Ibalik agad ang focus kay txtName para mabilis input.

        txtClassTime.setEditable(false);
        // I-lock si txtClassTime ‚Äî hindi na pwedeng i-edit.

        txtClassTime.setEnabled(false);
        // Gawing visually disabled ang txtClassTime.

        txtName.requestFocusInWindow();
        // Ulit, ibalik ulit focus kay txtName.
    }//GEN-LAST:event_txtClassTimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                    // Kung may available na "Nimbus" theme, gamitin.
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Att.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Att.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Att.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Att.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Att().setVisible(true);
                // I-launch ang GUI at ipakita ang window.
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckin;
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtClassTime;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
